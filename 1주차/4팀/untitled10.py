# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RZJppuWKCU2n5qjSkE__QG140NDfz-2U
"""

import numpy as np #numpy를 np로 불러옴

BOARD_ROWS = 3 #격자상태 행(rows)
BOARD_COLS = 4 #격자상태 열(columns)
WIN_STATE = (0, 3) # 보상값이 +1 인 종단 상태 위치
LOSE_STATE = (1, 3) # 보상값이 -1 인 종단 상태 위치
BLOCKED_STATE = (1, 1) # 이동할수없는영역
START = (2, 0) # 시작상태 위치
DETERMINISTIC = False # 상태 전이 함수의 확률 적용 플래그(False일 경우 적용)

class State:
    def __init__(self, state = START): # 상태 초기화
        self.state = state
        self.isEnd = False
        self.determine = DETERMINISTIC # True면 결정론적 전이(같은 행동을 하면 항상 같은 결과가 나옴), False면 확률적 전이(같은 행동을 해도 일정 확률로 다른 결과가 나올 수 있음)

    def giveReward(self): # 현재 상태에 따라 보상 반환
        if self.state == WIN_STATE:
            return 1 # 승리 보상: 1
        elif self.state == LOSE_STATE:
            return -1 # 패배 보상: -1
        else:
            return 0 # 그 외: 0

    def isEndFunc(self): # 현재 상태가 종료 상태인지 확인 후 isEnd 플래그 설정
        if (self.state == WIN_STATE) or (self.state == LOSE_STATE):
            self.isEnd = True

    def _chooseActionProb(self, action):  # 주어진 액션에 확률적으로 다른 행동이 선택될 수 있도록 처리
        if action == "U":
            return np.random.choice(["U", "L", "R"], p = [0.8, 0.1, 0.1])
        if action == "D":
            return np.random.choice(["D", "L", "R"], p = [0.8, 0.1, 0.1])
        if action == "L":
            return np.random.choice(["L", "U", "D"], p = [0.8, 0.1, 0.1])
        if action == "R":
            return np.random.choice(["R", "U", "D"], p = [0.8, 0.1, 0.1])

    def nxtPosition(self, action): # 격자 공간에서 다음 상태를 반환
        if self.determine: # 결정론적 전이
            if action == "U":
                nxtState = (self.state[0] - 1, self.state[1])
            elif action == "D":
                nxtState = (self.state[0] + 1, self.state[1])
            elif action == "L":
                nxtState = (self.state[0], self.state[1] - 1)
            else:
                nxtState = (self.state[0], self.state[1] + 1)
            self.determine = False # 다음 호출은 확률적 전이로 전환
        else:
            action = self._chooseActionProb(action) # 상태 전이 함수를 적용 (확률적 전이)
            self.determine = True # 다음 호출은 결정론적 전이로 전환
            nxtState = self.nxtPosition(action)
        if (nxtState[0] >= 0) and (nxtState[0] <= BOARD_ROWS - 1): # 벽을 뚫거나 이동할 수 없는 영역으로 상태를 바꿀 수 없음
            if (nxtState[1] >= 0) and (nxtState[1] <= BOARD_COLS - 1):
                if nxtState != BLOCKED_STATE:
                    return nxtState
        return self.state

class Agent:

    def __init__(self):
        self.states = [] # 위치와 행동 기록
        self.actions = ["U", "D", "L", "R"]
        self.State = State()
        self.isEnd = self.State.isEnd
        self.lr = 0.2
        self.decay_gamma = 0.9 # 할인률 0.9로 설정

        # 전체 상태에 대해 Q 함수 값 초기화
        self.Q_values = {}
        for i in range(BOARD_ROWS):
            for j in range(BOARD_COLS):
                self.Q_values[(i, j)] = {}
                for a in self.actions:
                    self.Q_values[(i, j)][a] = 0

    def chooseAction(self): # Q값을 최대화하는 다음 행동 선택
        max_nxt_reward = -float('inf')
        action = ""

        for a in self.actions:
            current_position = self.State.state
            nxt_reward = self.Q_values[current_position][a]
            if nxt_reward > max_nxt_reward:
                action = a
                max_nxt_reward = nxt_reward
        return action


    def takeAction(self, action): # 행동 후 상태 업데이트
        position = self.State.nxtPosition(action)
        return State(state = position)


    def reset(self): # 종단 상태 도달, 에피소드 초기화
        self.states = []
        self.State = State()
        self.isEnd = self.State.isEnd


    def play(self, episodes = 10):  # 지정한 에피소드 개수만큼 반복
        i = 0
        while i < episodes:
            if self.State.isEnd: # 게임이 끝날 때 까지 보상값의 역전파 진행
                reward = self.State.giveReward() # 역전파 진행
                for a in self.actions:
                    self.Q_values[self.State.state][a] = reward
                for s in reversed(self.states): # 방문 기록을 역순으로 순회
                    current_state = s[0]
                    current_action = s[1]
                    current_q_value = self.Q_values[current_state][current_action]
                    reward = current_q_value + self.lr * (self.decay_gamma * reward - current_q_value)
                    self.Q_values[current_state][current_action] = round(reward, 3)

                self.reset()
                i += 1
            else:
                action = self.chooseAction() # 현재 정책으로 행동 선택
                self.states.append([(self.State.state), action]) #추적
                self.State = self.takeAction(action) #액션 취하면 다음상태 도달
                self.State.isEndFunc() #종료상태 표기
                self.isEnd = self.State.isEnd

ag = Agent()
ag.play(1000)
print("latest Q-values ... \n")
print(ag.Q_values)